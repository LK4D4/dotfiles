set nocompatible               " Be iMproved

if empty(glob('~/.vim/autoload/plug.vim'))
  silent !curl -fLo ~/.vim/autoload/plug.vim --create-dirs
    \ https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
  autocmd VimEnter * PlugInstall | source $MYVIMRC
endif

call plug#begin('~/.vim/plugged')

Plug 'altercation/vim-colors-solarized'

Plug 'junegunn/fzf', { 'dir': '~/.fzf', 'do': './install --all' }
Plug 'junegunn/fzf.vim'
Plug 'easymotion/vim-easymotion'
Plug 'ervandew/supertab'
Plug 'scrooloose/nerdcommenter'
Plug 'majutsushi/tagbar'

Plug 'rhysd/vim-go-impl'
Plug 'nsf/gocode', { 'rtp': 'vim', 'do': '~/.vim/plugged/gocode/vim/symlink.sh' }
Plug 'dgryski/vim-godef'
Plug 'tpope/vim-markdown'
Plug 'rust-lang/rust.vim'

Plug 'tpope/vim-fugitive'
Plug 'jplaut/vim-arduino-ino'

call plug#end()

filetype plugin indent on

syntax off

nmap <Leader>s <Plug>(easymotion-overwin-f2)
let g:EasyMotion_smartcase = 1
map <Leader>j <Plug>(easymotion-j)
map <Leader>k <Plug>(easymotion-k)

set paste

set noexpandtab shiftwidth=4 softtabstop=4 tabstop=4
set nolist
set relativenumber
set listchars=tab:▹\ ,trail:▿

"eol:↵,
set keymap=russian-jcukenwin
set iminsert=0
set imsearch=0
highlight lCursor guifg=NONE guibg=Cyan
set wildmode=longest,list,full
set wildmenu
nmap <leader>l :set list! relativenumber!<CR>
nmap <leader>p :set list! number!<CR>

set incsearch hlsearch smartcase
set path=.,,**
set gdefault
set showmatch
set modeline nowrap
set encoding=utf8
set termencoding=utf8
set laststatus=2
set number
set cursorline
set hidden

set statusline=%F%m%r%h%w\ 
set statusline+=%=%{fugitive#statusline()}\    
set statusline+=[%{strlen(&fenc)?&fenc:&enc}]
set statusline+=\ [line\ %l\/%L]          

let g:SuperTabDefaultCompletionType = "<c-x><c-o>"

function s:GoImports()
    let view = winsaveview()
    silent execute "%!" . "goimports"
    if v:shell_error
        let errors = []
        for line in getline(1, line('$'))
            let tokens = matchlist(line, '^\(.\{-}\):\(\d\+\):\(\d\+\)\s*\(.*\)')
            if !empty(tokens)
                call add(errors, {"filename": @%,
                                 \"lnum":     tokens[2],
                                 \"col":      tokens[3],
                                 \"text":     tokens[4]})
            endif
        endfor
        if empty(errors)
            % | " Couldn't detect gofmt error format, output errors
        endif
        undo
        if !empty(errors)
            call setqflist(errors, 'r')
			copen
			cc 1
        endif
        echohl Error | echomsg "Goimports returned error" | echohl None
	else
		cclose
    endif
    call winrestview(view)
endfunction

autocmd FileType go autocmd BufWritePre <buffer> call s:GoImports()

let g:godef_split=0

set colorcolumn=81
set ttyfast
set wildmenu

" Press space to clear search highlighting
nnoremap <silent> <Space> :noh<CR>
nnoremap <NL> i<CR><ESC>
nnoremap <C-p> :Files<CR>
nnoremap <Space>/ :Ag 

" Map toggling paste mode
nnoremap <F2> :set invpaste paste?<CR>
set pastetoggle=<F2>
set invpaste
set mouse=a

nnoremap s :exec "normal i".nr2char(getchar())."\e"<CR>
nnoremap S :exec "normal a".nr2char(getchar())."\e"<CR>
nnoremap <F5> :set paste<CR>m`o<Esc>``:set nopaste<CR>
nnoremap <F6> :set paste<CR>m`O<Esc>``:set nopaste<CR>
nnoremap <F8> :TagbarToggle<CR>

"disable arrows
inoremap  <Up>     <NOP>
inoremap  <Down>   <NOP>
inoremap  <Left>   <NOP>
inoremap  <Right>  <NOP>
noremap   <Up>     <NOP>
noremap   <Down>   <NOP>
noremap   <Left>   <NOP>
noremap   <Right>  <NOP>

autocmd CursorMovedI * if pumvisible() == 0|pclose|endif
autocmd InsertLeave * if pumvisible() == 0|pclose|endif

set background=dark
if has('gui_running')
    set guioptions=a
    colorscheme solarized
    set guifont=Terminus\ 10
else
    let g:solarized_visibility = "high"
    colorscheme solarized
endif
