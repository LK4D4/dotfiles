set nocompatible               " Be iMproved

" NeoBundle check and auto install
let iCanHazNeoBundle=1
let NeoBundle_readme=expand('~/.vim/bundle/neobundle.vim/README.md')
if !filereadable(NeoBundle_readme)
    echo "Installing NeoBundle.."
    echo ""
    silent !mkdir -p ~/.vim/bundle
    silent !git clone https://github.com/Shougo/neobundle.vim ~/.vim/bundle/neobundle.vim
    let iCanHazNeoBundle=0
endif

if has('vim_starting')
  set runtimepath+=~/.vim/bundle/neobundle.vim/
endif

" Required:
call neobundle#begin(expand('~/.vim/bundle'))

" Let NeoBundle manage NeoBundle
" Required:
NeoBundleFetch 'Shougo/neobundle.vim'

" My Bundles here:
NeoBundle 'Shougo/vimproc', {'build': {'unix': 'make -f make_unix.mak'}}
NeoBundle 'Shougo/unite.vim'
NeoBundle 'fatih/vim-go'
NeoBundle 'klen/python-mode'
NeoBundle 'bling/vim-airline'
NeoBundle 'majutsushi/tagbar'
NeoBundle 'tpope/vim-fugitive'
NeoBundle 'tpope/vim-surround'
NeoBundle 'tpope/vim-markdown'
NeoBundle 'scrooloose/nerdcommenter'
NeoBundle 'altercation/vim-colors-solarized'
NeoBundle 'ervandew/supertab'
NeoBundle 'davidhalter/jedi-vim'

" Required:
call neobundle#end()

" Required:
filetype plugin indent on

" Installation check.
if iCanHazNeoBundle == 0
    echo "Installing Bundles, please ignore key map error messages"
    echo ""
    :NeoBundleInstall
endif

NeoBundleCheck

syntax on

call unite#filters#matcher_default#use(['matcher_fuzzy'])
call unite#filters#sorter_default#use(['sorter_rank'])
let g:unite_source_rec_async_command = 'pt --nocolor --nogroup -g .'
nnoremap <space>/ :Unite grep:. -buffer-name=search-buffer<CR>
if executable('pt')
  let g:unite_source_grep_command = 'pt'
  let g:unite_source_grep_default_opts = '--nogroup --nocolor'
  let g:unite_source_grep_recursive_opt = ''
  let g:unite_source_grep_encoding = 'utf-8'
endif

nnoremap <silent> <C-p> :Unite -auto-resize file_rec/async<CR>:startinsert<CR>

set paste

set expandtab shiftwidth=4 softtabstop=4 tabstop=4
set list
set relativenumber
set listchars=tab:▹\ ,trail:▿
"autocmd FileType go autocmd BufWritePre <buffer> Fmt
autocmd FileType go setlocal noexpandtab shiftwidth=4 tabstop=4 softtabstop=4 nolist

"eol:↵,
set keymap=russian-jcukenwin
set iminsert=0
set imsearch=0
highlight lCursor guifg=NONE guibg=Cyan
set wildmode=longest,list,full
set wildmenu
nmap <leader>l :set list! relativenumber!<CR>
nmap <leader>p :set list! number!<CR>

set incsearch hlsearch smartcase
set path=.,,**
set gdefault
set showmatch
set modeline nowrap
set encoding=utf8
set termencoding=utf8
set laststatus=2
set number
set cursorline
set hidden
"au BufEnter *.hs compiler ghc
"let g:haddock_browser="/usr/bin/chromium"
"let g:haddock_browser_callformat="%s file://%s >/dev/null 2>&1 &"
let haskell_indent_case=4
let haskell_indent_if=2

let g:airline_theme='solarized'
let g:airline_left_sep = '»'
let g:airline_right_sep = '«'
let g:airline_linecolumn_prefix = '␤ '
let g:airline_paste_symbol = 'ρ'
let g:airline_enable_syntastic=0
let g:pymode_lint_cwindow = 0
let g:pymode_folding = 0
let g:pymode_lint_checker = "pylint,pep8,pyflakes"
let g:pymode_lint_minheight = 10
let g:pymode_lint_maxheight = 12
let g:pymode_breakpoint = 0
let g:pymode_rope = 0
let g:ctrlp_cmd = 'CtrlPMixed'
let g:jedi#use_tabs_not_buffers = 0
let g:SuperTabDefaultCompletionType = "<c-x><c-o>"

let g:go_disable_autoinstall = 1
let g:go_bin_path = "~/bin"
au FileType go nmap <Leader>ds <Plug>(go-def-split)
au FileType go nmap <Leader>i <Plug>(go-info)
au FileType go nmap gd <Plug>(go-def)
au FileType go nmap <Leader>gd <Plug>(go-doc)
au FileType go nmap <leader>b <Plug>(go-build)

"autocmd BufWritePre *.py :%s/\s\+$//e

set colorcolumn=81
set ttyfast
set wildmenu

" Press space to clear search highlighting
nnoremap <silent> <Space> :noh<CR>
nnoremap <NL> i<CR><ESC>

" Map toggling paste mode
nnoremap <F2> :set invpaste paste?<CR>
set pastetoggle=<F2>
set invpaste
set mouse=a

nnoremap bt :bnext<CR>
nnoremap br :bprev<CR>
nnoremap gr :tabprev<CR>
nnoremap <leader>n :NERDTreeToggle<CR>
nnoremap <leader>w :PyLintWindowToggle<CR>
nnoremap <F3> :cnext<CR>
nnoremap <S-F3> :cprev<CR>
nnoremap s :exec "normal i".nr2char(getchar())."\e"<CR>
nnoremap S :exec "normal a".nr2char(getchar())."\e"<CR>
nnoremap <F5> :set paste<CR>m`o<Esc>``:set nopaste<CR>
nnoremap <F6> :set paste<CR>m`O<Esc>``:set nopaste<CR>
nnoremap <F8> :TagbarToggle<CR>
nnoremap <leader>j !python -m json.tool<CR>

"disable arrows
inoremap  <Up>     <NOP>
inoremap  <Down>   <NOP>
inoremap  <Left>   <NOP>
inoremap  <Right>  <NOP>
noremap   <Up>     <NOP>
noremap   <Down>   <NOP>
noremap   <Left>   <NOP>
noremap   <Right>  <NOP>

autocmd CursorMovedI * if pumvisible() == 0|pclose|endif
autocmd InsertLeave * if pumvisible() == 0|pclose|endif

ab pdb import pdb; pdb.set_trace()
ab ipdb import ipdb; ipdb.set_trace()
ab shabang #!/usr/bin/python
ab utf8 # coding: utf-8
ab ifmain if __name__ == "__main__":

set background=dark
if has('gui_running')
    set guioptions=a
    colorscheme solarized
    set guifont=Terminus\ 10
else
    let g:solarized_visibility = "high"
    colorscheme solarized
endif
